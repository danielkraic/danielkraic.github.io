<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boost on Linux notes</title>
    <link>https://danielkraic.github.io/tags/boost/</link>
    <description>Recent content in Boost on Linux notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 May 2016 10:33:23 +0200</lastBuildDate>
    <atom:link href="https://danielkraic.github.io/tags/boost/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Boost DI</title>
      <link>https://danielkraic.github.io/2016/05/27/boost-di/</link>
      <pubDate>Fri, 27 May 2016 10:33:23 +0200</pubDate>
      
      <guid>https://danielkraic.github.io/2016/05/27/boost-di/</guid>
      <description>

&lt;h1 id=&#34;boost-di&#34;&gt;Boost::DI&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;C++14 header only Dependency Injection library with no dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dependency-injection-di&#34;&gt;Dependency Injection (DI)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the clientâ€™s state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;no-dependency-injection&#34;&gt;No dependency injection&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class coffee_maker {
public:
  // create dependencies in the constructor
  coffee_maker()
  : heater(std::make_shared&amp;lt;electric_heater&amp;gt;())
  , pump(std::make_unique&amp;lt;heat_pump&amp;gt;(heater))
  { }
  void brew() {
    heater-&amp;gt;on();
    pump-&amp;gt;pump();
  }
private:
  std::shared_ptr&amp;lt;iheater&amp;gt; heater;
  std::unique_ptr&amp;lt;ipump&amp;gt; pump;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dependency-injection&#34;&gt;Dependency injection&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class coffee_maker {
public:
  // inject dependencies via constructor
  coffee_maker(std::shared_ptr&amp;lt;iheater&amp;gt; heater, std::unique_ptr&amp;lt;ipump&amp;gt; pump)
  : heater(heater), pump(std::move(pump))
  { }
  void brew() {
    heater-&amp;gt;on();
    pump-&amp;gt;pump();
  }
private:
  std::shared_ptr&amp;lt;iheater&amp;gt; heater;
  std::unique_ptr&amp;lt;ipump&amp;gt; pump;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;DI provides loosely coupled code (separation of business logic and object creation)&lt;/li&gt;
&lt;li&gt;DI provides easier to maintain code (different objects might be easily injected)&lt;/li&gt;
&lt;li&gt;DI provides easier to test code (fakes objects might be injected)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example 1&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;app&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct renderer { int device; };
class iview {
public:
virtual ~iview() = default;
virtual void update() = 0;
};
class model {};
class controller {
public:
controller(model&amp;amp;, view&amp;amp;) {}
};
class user {};
class app {
public:
app(controller&amp;amp;, user&amp;amp;) {}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;usual approach to create app&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;renderer renderer_;
view view_{&amp;quot;title&amp;quot;, renderer_};
model model_;
controller controller_{model_, view_};
user user_;
app app_{controller_, user_};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create app with boost::di&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto app = di::make_injector().create&amp;lt;app&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example 2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class controller;

struct renderer {
  int device;
};

class view {
 public:
  view(std::string /*title*/, const renderer&amp;amp;) {}
};

class model {};
class user {};

class app {
 public:
  app(controller&amp;amp;, user&amp;amp;) {}
};

/// CREATE OBJECTS TREE
class controller {
 public:
  controller(model&amp;amp;, view&amp;amp;) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main() {
  /// NO DEPENDENCY INJECTION
  {
    renderer renderer_;
    view view_{&amp;quot;&amp;quot;, renderer_};
    model model_;
    controller controller_{model_, view_};
    user user_;
    app app_{controller_, user_};
    (void)app_;
  }

  /// DEPENDENCY INJECTION
  {
    auto injector = di::make_injector();
    auto app_ = injector.create&amp;lt;app&amp;gt;();
    (void)app_;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/// CHANGE CONTROLLER CONSTRUCTOR ORDER
class controller {
 public:
  controller(view&amp;amp;, model&amp;amp;) {}
};

int main() {
  /// NO DEPENDENCY INJECTION
  {
  renderer renderer_;
  view view_{&amp;quot;&amp;quot;, renderer_};
  model model_;
  //controller controller_{model_, view_};
  controller controller_{view_, model_}; /// CHANGE
  user user_;
  app app_{controller_, user_};
  (void)app_;
  }

  /// DEPENDENCY INJECTION
  {
  auto injector = di::make_injector();
  auto app_ = injector.create&amp;lt;app&amp;gt;();
  (void)app_;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/// ADD A NEW DEPENDENCY TO CONTROLLER
struct configuration {};
class controller {
 public:
  controller(view&amp;amp;, model&amp;amp;, configuration) {}
};

int main() {
  /// NO DEPENDENCY INJECTION
  {
  renderer renderer_;
  view view_{&amp;quot;&amp;quot;, renderer_};
  model model_;
  //controller controller_{model_, view_};
  controller controller_{view_, model_, configuration{}}; /// CHANGE
  user user_;
  app app_{controller_, user_};
  (void)app_;
  }

  /// DEPENDENCY INJECTION
  {
  auto injector = di::make_injector();
  auto app_ = injector.create&amp;lt;app&amp;gt;();
  (void)app_;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bindings&#34;&gt;Bindings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class iview {
public:
  virtual ~iview() noexcept = default;
  virtual void update() =0;
};

class gui_view: public iview {
public:
  gui_view(std::string title, const renderer&amp;amp;) {}
  void update() override {}
};

class text_view: public iview {
public:
  void update() override {}
};

auto injector = di::make_injector(
  di::bind&amp;lt;iview&amp;gt;.to&amp;lt;gui_view&amp;gt;() // bind interface to implementation
);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct T { // create using uniform initialization
  int&amp;amp; a;  // might be used to serialize
  double b;
};

auto i = 42;
auto injector = di::make_injector(
  di::bind&amp;lt;int&amp;gt;.to(i),
  di::bind&amp;lt;double&amp;gt;.to(87.0)
);
injector.create&amp;lt;T&amp;gt;(); // will create T{i, 87.0};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto use_gui_view = true/false;

auto injector = di::make_injector(
  di::bind&amp;lt;iview&amp;gt;.to([&amp;amp;](const auto&amp;amp; injector) -&amp;gt; iview&amp;amp; {
    return use_gui_view ?
      injector.template create&amp;lt;gui_view&amp;amp;&amp;gt;() :
      injector.template create&amp;lt;text_view&amp;amp;&amp;gt;();
  })
);

use_gui_view = true;
assert(dynamic_cast&amp;lt;gui_view*&amp;gt;(
  injector.create&amp;lt;std::unique_ptr&amp;lt;iview&amp;gt;().get())
);

use_gui_view = false;
assert(dynamic_cast&amp;lt;text_view*&amp;gt;(
  injector.create&amp;lt;std::unique_ptr&amp;lt;iview&amp;gt;().get())
);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>