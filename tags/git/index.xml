<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Linux notes</title>
    <link>https://danielkraic.github.io/tags/git/</link>
    <description>Recent content in Git on Linux notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Aug 2016 15:25:28 +0200</lastBuildDate>
    <atom:link href="https://danielkraic.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>git</title>
      <link>https://danielkraic.github.io/2016/08/29/git/</link>
      <pubDate>Mon, 29 Aug 2016 15:25:28 +0200</pubDate>
      
      <guid>https://danielkraic.github.io/2016/08/29/git/</guid>
      <description>

&lt;h1 id=&#34;git&#34;&gt;git&lt;/h1&gt;

&lt;h2 id=&#34;config&#34;&gt;config&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &amp;quot;John Doe&amp;quot;
git config --global user.email johndoe@example.com
git config --global core.editor nvim
git config --global core.difftool meld
git config --global core.mergetool meld

git difftool --tool-help
git mergetool --tool-help

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

git config --global alias.unstage &#39;reset HEAD --&#39;
# git unstaged file_name
# git reset HEAD file_name

git config --global alias.visual &#39;!gitk&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/gitconfig
cat ~/.gitconfig

git config --list
git config user.name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;help&#34;&gt;help&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git help &amp;lt;verb&amp;gt;
git &amp;lt;verb&amp;gt; --help
man git-&amp;lt;verb&amp;gt;
git help config
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gitignore&#34;&gt;gitignore&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Blank lines or lines starting with # are ignored.&lt;/li&gt;
&lt;li&gt;Standard glob patterns work.&lt;/li&gt;
&lt;li&gt;You can start patterns with a forward slash ( / ) to avoid recursivity.&lt;/li&gt;
&lt;li&gt;You can end patterns with a forward slash ( / ) to specify a directory.&lt;/li&gt;
&lt;li&gt;You can negate a pattern by starting it with an exclamation point ( ! ).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat .gitignore
# no .a files
*.a
# except lib.a
!lib.a
# only ignore the TODO file in the current directory, not subdir/TODO
/TODO
# ignore all files in the build/ directory
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
        ```

## init

```bash
git init
git clone [url]
git clone [url] dir_nam
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;status&#34;&gt;status&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git status
git status -s
git status --short
git add README
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;diff&#34;&gt;diff&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git diff
git diff --staged
git diff --cached
# --staged and --cached are synonyms
git difftool
git difftool --tool-help
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commit&#34;&gt;commit&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit
git commit -v
git commit -m &#39;commit msg&#39;
git commit -a
git commit -a -m &#39;commit msg&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;undo&#34;&gt;undo&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#39;msg&#39;
git add forgotten_file
git commit --amend

git reset HEAD staged_file

git checkout modified_file
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;move-and-delete&#34;&gt;move and delete&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rm file
git rm --cached file # remove only from stage
git rm \*~
git mv file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git log
git log --stat # see commit stats
git log --shortstat
git log --graph
git log --abbrev-commit
git log --name-status
git log --name-only
git log -p # print diff
git log --oneline --decorate
git log --oneline --decorate --graph --all

git log -2 # limit to last 2 commits
git log --after=2.weeks # --since, --after
git log --before=2.weeks # --until, --before
git log --since=2008-01-15
git log --author=name
git log --commiter=name
git log -Sfunction_name # grep added/removed code
git log --grep pattern # grep commit message

git log --pretty=oneline
git log --pretty=short
git log --pretty=full
git log --pretty=fuller
git log --pretty=format:&amp;quot;%h - %an, %ar : %s&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pretty log options:
* %H Commit hash
* %h Abbreviated commit hash
* %T Tree hash
* %t Abbreviated tree hash
* %P Parent hashes
* %p Abbreviated parent hashes
* %an Author name
* %ae Author email
* %ad Author date (format respects the &amp;ndash;date=option)
* %ar Author date, relative
* %cn Committer name
* %ce Committer email
* %cd Committer date
* %cr Committer date, relative
* %s Subject&lt;/p&gt;

&lt;h2 id=&#34;remotes&#34;&gt;remotes&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote
git remote -v
git remote show remote_name
git remote add remote_name remote_url
git remote rename old_remote_name new_remote_name
git remote rm remote_name

git fetch remote_name
git fetch --all
git pull # fetch and merge (from server you originally clone from)
git push remote_name branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tags&#34;&gt;tags&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git tag
git tag -l &amp;quot;v1.8.5*&amp;quot; # grep tags

# create anotated tag
git tag -a v1.4 -m &amp;quot;my version 1.4&amp;quot;
git show v1.4

# create tag into history
git log --pretty=oneline
git tag -a v1.2 9fceb02

# create lightweight tag
git tag v1.4-lw

# tags are not pushed by default, need to do it explicitly
git push origin v1.4
git push origin --tags

git checkout -b branch_name tag_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;branch&#34;&gt;branch&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git branch
git branch -v # see last commit
git branch --merged
git branch ---no-merged

git branch new_branch_name
git checkout new_branch_name

git checkout -b new_branch_name

git checkout master
git merge new_branch_name

git branch -d new_branch_name
git branch -D new_branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-branches&#34;&gt;remote branches&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git ls-remote
git ls-remote [remote]
git remote show [remote]

git checkout -b br1 origin/br1
# or
git checkout --track origin/br1
# or
git checkout br1

git checkout -b different_br_name origin/br1

# set existing branch to track remote branch`
git branch -u origin/serverfix

git branch -vv # see tracking branches info

# delete remote branch
git push origin --delete br1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>